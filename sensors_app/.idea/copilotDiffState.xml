<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/io/sensor_prod/sensor/ui/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/io/sensor_prod/sensor/ui/MainActivity.kt" />
              <option name="originalContent" value="package io.sensor_prod.sensor.ui&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.hardware.SensorManager&#10;import android.net.Uri&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.provider.Settings&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.annotation.RequiresApi&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.lifecycle.lifecycleScope&#10;import io.sensor_prod.sensor.domains.permissions.PermissionsRequest&#10;import io.sensor_prod.sensor.domains.permissions.RememberPermissionManager&#10;import io.sensor_prod.sensor.domains.permissions.forPurpose&#10;import io.sensor_prod.sensor.domains.permissions.runAtStart&#10;import io.sensor_prod.sensor.domains.sensors.packets.SensorPacketsProvider&#10;import io.sensor_prod.sensor.domains.sensors.provider.SensorsProvider&#10;import io.sensor_prod.sensor.ui.navigation.NavGraphApp&#10;import io.sensor_prod.sensor.ui.resource.themes.SensifyM3Theme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val STORAGE_PERMISSION_CODE = 100&#10;&#10;    @RequiresApi(Build.VERSION_CODES.S)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        val sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager&#10;&#10;        lifecycleScope.launch {&#10;            SensorsProvider.getInstance().setSensorManager(sensorManager)&#10;            SensorPacketsProvider.getInstance().setSensorManager(sensorManager)&#10;        }&#10;&#10;        setContent {&#10;            SensifyM3Theme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    var hasPermissions by remember { mutableStateOf(false) }&#10;&#10;                    val permissionRequest = PermissionsRequest&#10;                        .forPurpose(PermissionsRequest.PURPOSE_DETAIL)&#10;                        .runAtStart(true)&#10;&#10;                    val permissionState = RememberPermissionManager(permissionRequest) { isGranted -&gt;&#10;                        hasPermissions = isGranted&#10;                        Log.d(&quot;MainActivity&quot;, &quot;Permissions granted: $isGranted&quot;)&#10;&#10;                        // If regular permissions granted but still need storage access&#10;                        if (isGranted &amp;&amp; !Environment.isExternalStorageManager()) {&#10;                            requestStoragePermission()&#10;                        }&#10;                    }&#10;                        NavGraphApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;&#10;        lifecycleScope.launch(Dispatchers.Default) {&#10;            SensorsProvider.getInstance().clearAll()&#10;            SensorPacketsProvider.getInstance().clearAll()&#10;        }&#10;    }&#10;&#10;    @RequiresApi(Build.VERSION_CODES.R)&#10;    private fun requestStoragePermission()  {&#10;        try {&#10;            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)&#10;            val uri = Uri.parse(&quot;package:$packageName&quot;)&#10;            intent.data = uri&#10;            startActivityForResult(intent, STORAGE_PERMISSION_CODE) // Use a constant for the request code&#10;            Toast.makeText(this, &quot;Please allow access to all files&quot;, Toast.LENGTH_LONG).show()&#10;&#10;        } catch (e: Exception) {&#10;            // Fallback for some devices&#10;            val intent = Intent()&#10;            intent.action = Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION&#10;            startActivityForResult(intent, STORAGE_PERMISSION_CODE)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package io.sensor_prod.sensor.ui&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.hardware.SensorManager&#10;import android.net.Uri&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.provider.Settings&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.annotation.RequiresApi&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.core.view.WindowCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import io.sensor_prod.sensor.domains.permissions.PermissionsRequest&#10;import io.sensor_prod.sensor.domains.permissions.RememberPermissionManager&#10;import io.sensor_prod.sensor.domains.permissions.forPurpose&#10;import io.sensor_prod.sensor.domains.permissions.runAtStart&#10;import io.sensor_prod.sensor.domains.sensors.packets.SensorPacketsProvider&#10;import io.sensor_prod.sensor.domains.sensors.provider.SensorsProvider&#10;import io.sensor_prod.sensor.ui.navigation.NavGraphApp&#10;import io.sensor_prod.sensor.ui.resource.themes.SensifyM3Theme&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val STORAGE_PERMISSION_CODE = 100&#10;&#10;    @RequiresApi(Build.VERSION_CODES.S)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        val sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager&#10;&#10;        lifecycleScope.launch {&#10;            SensorsProvider.getInstance().setSensorManager(sensorManager)&#10;            SensorPacketsProvider.getInstance().setSensorManager(sensorManager)&#10;        }&#10;&#10;        // Enable edge-to-edge; we'll pad content with safeDrawing insets in Compose&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContent {&#10;            SensifyM3Theme {&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .windowInsetsPadding(WindowInsets.safeDrawing),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    var hasPermissions by remember { mutableStateOf(false) }&#10;&#10;                    val permissionRequest = PermissionsRequest&#10;                        .forPurpose(PermissionsRequest.PURPOSE_DETAIL)&#10;                        .runAtStart(true)&#10;&#10;                    val permissionState = RememberPermissionManager(permissionRequest) { isGranted -&gt;&#10;                        hasPermissions = isGranted&#10;                        Log.d(&quot;MainActivity&quot;, &quot;Permissions granted: $isGranted&quot;)&#10;&#10;                        // If regular permissions granted but still need storage access&#10;                        if (isGranted &amp;&amp; !Environment.isExternalStorageManager()) {&#10;                            requestStoragePermission()&#10;                        }&#10;                    }&#10;                    NavGraphApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;&#10;        lifecycleScope.launch(Dispatchers.Default) {&#10;            SensorsProvider.getInstance().clearAll()&#10;            SensorPacketsProvider.getInstance().clearAll()&#10;        }&#10;    }&#10;&#10;    @RequiresApi(Build.VERSION_CODES.R)&#10;    private fun requestStoragePermission()  {&#10;        try {&#10;            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)&#10;            val uri = Uri.parse(&quot;package:$packageName&quot;)&#10;            intent.data = uri&#10;            startActivityForResult(intent, STORAGE_PERMISSION_CODE) // Use a constant for the request code&#10;            Toast.makeText(this, &quot;Please allow access to all files&quot;, Toast.LENGTH_LONG).show()&#10;&#10;        } catch (e: Exception) {&#10;            // Fallback for some devices&#10;            val intent = Intent()&#10;            intent.action = Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION&#10;            startActivityForResult(intent, STORAGE_PERMISSION_CODE)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/io/sensor_prod/sensor/ui/pages/home/HomePage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/io/sensor_prod/sensor/ui/pages/home/HomePage.kt" />
              <option name="originalContent" value="package io.sensor_prod.sensor.ui.pages.home&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.camera.video.Quality&#10;import androidx.camera.video.QualitySelector&#10;import androidx.camera.video.Recorder&#10;import androidx.camera.video.VideoCapture&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.ExperimentalAnimationApi&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material.icons.rounded.AddChart&#10;import androidx.compose.material.icons.rounded.Videocam&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.ExperimentalTextApi&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import io.sensify.sensor.R&#10;import io.sensor_prod.sensor.ui.navigation.NavDirectionsApp&#10;import io.sensor_prod.sensor.ui.pages.home.items.HomeSensorItem&#10;import io.sensor_prod.sensor.ui.resource.values.JlResDimens&#10;import io.sensor_prod.sensor.ui.resource.values.JlResShapes&#10;import io.sensor_prod.sensor.ui.resource.values.JlResTxtStyles&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import kotlin.coroutines.resume&#10;import kotlin.coroutines.suspendCoroutine&#10;&#10;@OptIn(&#10;    ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class, ExperimentalTextApi::class,&#10;    ExperimentalPagerApi::class, ExperimentalAnimationApi::class&#10;)&#10;@Composable&#10;fun HomePage(&#10;    modifier: Modifier = Modifier, navController: NavController? = null,&#10;    viewModel: HomeViewModel = viewModel(&#10;        factory = HomeViewModel.Factory()&#10;    )&#10;) {&#10;&#10;    val context = LocalContext.current&#10;    viewModel.initModel(context = context)&#10;    viewModel.startGyroListening(context)&#10;&#10;    val camVM: CameraViewModel = viewModel(&#10;        factory = CameraViewModel.Factory()&#10;    )&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;    val cameraxSelector = CameraSelector.Builder().requireLensFacing(CameraSelector.LENS_FACING_BACK).build()&#10;&#10;    LaunchedEffect(Unit) {&#10;        val recorder = Recorder.Builder()&#10;            .setQualitySelector(QualitySelector.fromOrderedList(&#10;                listOf(Quality.HD, Quality.FHD) // prefer HD to save power&#10;            ))&#10;            .build()&#10;        val videoCapture = VideoCapture.withOutput(recorder)&#10;&#10;        // Initialize the ViewModel with application context inside VM&#10;        camVM.initialize(context, videoCapture)&#10;        val cameraProvider = context.getCameraProvider()&#10;        cameraProvider.unbindAll()&#10;        cameraProvider.bindToLifecycle(lifecycleOwner, cameraxSelector, videoCapture)&#10;        camVM.startRecordingClips()&#10;    }&#10;&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    val potholeDetected = viewModel.potholeDetected.collectAsState()&#10;    Log.d(&quot;HomePage&quot;, &quot;potholeDetected ${potholeDetected.value}&quot;)&#10;&#10;    val isAtTop = remember {&#10;        derivedStateOf {&#10;            lazyListState.firstVisibleItemIndex == 0 &amp;&amp; lazyListState.firstVisibleItemScrollOffset == 0&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(potholeDetected.value) {&#10;        if (potholeDetected.value) {&#10;            withContext(Dispatchers.Main) {&#10;                try {&#10;                    camVM.triggerEventRecording()&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;Recording&quot;, &quot;Error: ${e.message}&quot;, e)&#10;                }&#10;            }&#10;&#10;            // Toast must run on Main thread&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Pothole detected! Recording started.&quot;,&#10;                Toast.LENGTH_SHORT&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    // Use safeDrawing insets to avoid status bar/notch overlap&#10;    Scaffold(&#10;        topBar = {&#10;            SmallTopAppBar(&#10;                colors = if (!isAtTop.value) TopAppBarDefaults.mediumTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                ) else TopAppBarDefaults.mediumTopAppBarColors(&#10;                    containerColor = Color.Transparent&#10;                ),&#10;                navigationIcon = {&#10;                    Box(Modifier.padding(horizontal = JlResDimens.dp20)) {&#10;                        Image(&#10;                            painterResource(id = R.drawable.pic_sensify_logo),&#10;                            modifier = Modifier&#10;                                .width(JlResDimens.dp32)&#10;                                .height(JlResDimens.dp36),&#10;                            contentDescription = null,&#10;                            contentScale = ContentScale.FillBounds&#10;                        )&#10;                    }&#10;                },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;ILGC&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        textAlign = TextAlign.Center,&#10;                        style = JlResTxtStyles.h4,&#10;                        fontWeight = FontWeight(400),&#10;                        modifier = modifier.fillMaxWidth(),&#10;                    )&#10;                },&#10;                actions = {&#10;                    Box(Modifier.padding(horizontal = JlResDimens.dp20)) {&#10;                        Image(&#10;                            painterResource(id = R.drawable.pic_sensify_logo),&#10;                            modifier = Modifier&#10;                                .alpha(0f)&#10;                                .width(JlResDimens.dp32)&#10;                                .height(JlResDimens.dp36),&#10;                            contentDescription = null,&#10;                            contentScale = ContentScale.FillBounds&#10;                        )&#10;                    }&#10;                },&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                modifier = Modifier&#10;                    .windowInsetsPadding(WindowInsets.navigationBars)&#10;                    .padding(bottom = 16.dp)&#10;            ) {&#10;                Column {&#10;                    ToggleableFAB(viewModel)&#10;                    FloatingActionButton(&#10;                        onClick = { camVM.triggerEventRecording() },&#10;                        shape = RoundedCornerShape(50),&#10;                        containerColor = if (camVM.isRecording) Color.Red else Color.Blue,&#10;                        modifier = Modifier&#10;                            .padding(bottom = 16.dp)&#10;                            .background(&#10;                                brush = Brush.linearGradient(&#10;                                    colors = if (camVM.isRecording)&#10;                                        listOf(&#10;                                            Color.Red.copy(alpha = 0.8f),&#10;                                            Color.Red.copy(alpha = 0.5f)&#10;                                        )&#10;                                    else&#10;                                        listOf(&#10;                                            Color.Blue.copy(alpha = 0.8f),&#10;                                            Color.Blue.copy(alpha = 0.5f)&#10;                                        )&#10;                                ),&#10;                                shape = RoundedCornerShape(50.dp)&#10;                            )&#10;                            .border(&#10;                                brush = Brush.verticalGradient(&#10;                                    colors = if (camVM.isRecording)&#10;                                        listOf(&#10;                                            Color.Black.copy(alpha = 0.1f),&#10;                                            Color.Black.copy(alpha = 0.3f)&#10;                                        )&#10;                                    else&#10;                                        listOf(&#10;                                            Color.White.copy(alpha = 0.1f),&#10;                                            Color.White.copy(alpha = 0.3f)&#10;                                        )&#10;                                ),&#10;                                width = JlResDimens.dp1,&#10;                                shape = RoundedCornerShape(50.dp)&#10;                            )&#10;                    ) {&#10;                        Icon(Icons.Rounded.Videocam, &quot;Record Video&quot;, tint = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;    ) {&#10;&#10;        LazyColumn(&#10;&#10;            modifier = Modifier&#10;                .consumedWindowInsets(it)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.05f),&#10;                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.02f),&#10;                        )&#10;                    )&#10;                ),&#10;            contentPadding = it,&#10;            state = lazyListState&#10;        ) {&#10;&#10;            item {&#10;                Spacer(modifier = JlResShapes.Space.H24)&#10;&#10;            }&#10;&#10;            // Available Sensors&#10;            item {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .padding(&#10;                            start = JlResDimens.dp40, end = JlResDimens.dp32,&#10;                            top = JlResDimens.dp12, bottom = JlResDimens.dp16&#10;                        ),&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Available Sensors&quot;,&#10;                        fontSize = JlResDimens.sp16,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;&#10;            items(viewModel.mSensorsList.windowed(2, 2, true)) { item -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = JlResDimens.dp32)&#10;                ) {&#10;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        ) {&#10;                        for (i in item.indices) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                            ) {&#10;                                HomeSensorItem(&#10;                                    modelSensor = item[i],&#10;                                    onCheckChange = { type: Int, isChecked: Boolean -&gt;&#10;                                        viewModel.onSensorChecked(type, isChecked)&#10;                                    },&#10;                                    onClick = {&#10;                                        navController?.navigate(&quot;${NavDirectionsApp.SensorDetailPage.route}/${it}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;&#10;                            if (i &lt; item.size - 1) {&#10;                                Spacer(modifier = Modifier.width(JlResDimens.dp8))&#10;                            }&#10;                        }&#10;                        if (item.size % 2 != 0) {&#10;                            Spacer(modifier = Modifier.width(JlResDimens.dp8))&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(JlResDimens.dp8))&#10;&#10;            }&#10;&#10;            item { Spacer(modifier = Modifier.height(JlResDimens.dp16)) }&#10;        }&#10;    }&#10;&#10;    // Responsive pothole banner that respects status bar/notch and screen width&#10;    val screenWidthDp = LocalConfiguration.current.screenWidthDp&#10;    val bannerFontSize = if (screenWidthDp &lt; 360) 12.sp else 14.sp&#10;    AnimatedVisibility(&#10;        visible = potholeDetected.value,&#10;        enter = expandVertically(animationSpec = tween(durationMillis = 900)),&#10;        exit = shrinkVertically(animationSpec = tween(durationMillis = 900)),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .windowInsetsPadding(WindowInsets.statusBars)&#10;            .padding(horizontal = 16.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(Color.Red.copy(alpha = 0.7f), shape = RoundedCornerShape(8.dp))&#10;                .padding(8.dp)&#10;        ) {&#10;            Icon(&#10;                Icons.Default.Warning,&#10;                contentDescription = &quot;Warning&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(if (screenWidthDp &lt; 360) 18.dp else 24.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Pothole detected!&quot;,&#10;                color = Color.White,&#10;                style = JlResTxtStyles.p3.copy(fontSize = bannerFontSize)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ToggleableFAB(viewModel: HomeViewModel) {&#10;    var isLogging by remember { mutableStateOf(false) }&#10;&#10;    FloatingActionButton(&#10;        onClick = {&#10;            isLogging = !isLogging  // Toggle state&#10;            viewModel.toggleCsvLogging()&#10;        },&#10;        shape = RoundedCornerShape(50),&#10;        containerColor = if (isLogging) Color(0xFF800080) else Color.Yellow, // Purple when active&#10;        modifier = Modifier&#10;            .padding(bottom = 16.dp)&#10;            .background(&#10;                brush = Brush.linearGradient(&#10;                    colors = listOf(&#10;                        if (isLogging) Color.Magenta.copy(alpha = 0.8f) else Color.Red.copy(alpha = 0.8f),&#10;                        if (isLogging) Color.Magenta.copy(alpha = 0.5f) else Color.Red.copy(alpha = 0.5f)&#10;                    )&#10;                ),&#10;                shape = RoundedCornerShape(50.dp)&#10;            )&#10;            .border(&#10;                brush = Brush.verticalGradient(&#10;                    listOf(Color.Black.copy(alpha = 0.1f), Color.Black.copy(alpha = 0.3f))&#10;                ),&#10;                width = JlResDimens.dp1,&#10;                shape = RoundedCornerShape(50.dp)&#10;            )&#10;    ) {&#10;        Icon(Icons.Rounded.AddChart, &quot;Record CSV&quot;, tint = Color.White)&#10;    }&#10;}&#10;private suspend fun Context.getCameraProvider(): ProcessCameraProvider =&#10;    suspendCoroutine { continuation -&gt;&#10;        ProcessCameraProvider.getInstance(this).also { cameraProvider -&gt;&#10;            cameraProvider.addListener({&#10;                continuation.resume(cameraProvider.get())&#10;            }, ContextCompat.getMainExecutor(this))&#10;        }&#10;    }" />
              <option name="updatedContent" value="package io.sensor_prod.sensor.ui.pages.home&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.camera.video.Quality&#10;import androidx.camera.video.QualitySelector&#10;import androidx.camera.video.Recorder&#10;import androidx.camera.video.VideoCapture&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.ExperimentalAnimationApi&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material.icons.rounded.AddChart&#10;import androidx.compose.material.icons.rounded.Videocam&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalLifecycleOwner&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.ExperimentalTextApi&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import io.sensify.sensor.R&#10;import io.sensor_prod.sensor.ui.navigation.NavDirectionsApp&#10;import io.sensor_prod.sensor.ui.pages.home.items.HomeSensorItem&#10;import io.sensor_prod.sensor.ui.resource.values.JlResDimens&#10;import io.sensor_prod.sensor.ui.resource.values.JlResShapes&#10;import io.sensor_prod.sensor.ui.resource.values.JlResTxtStyles&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import kotlin.coroutines.resume&#10;import kotlin.coroutines.suspendCoroutine&#10;&#10;@OptIn(&#10;    ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class, ExperimentalTextApi::class,&#10;    ExperimentalPagerApi::class, ExperimentalAnimationApi::class&#10;)&#10;@Composable&#10;fun HomePage(&#10;    modifier: Modifier = Modifier, navController: NavController? = null,&#10;    viewModel: HomeViewModel = viewModel(&#10;        factory = HomeViewModel.Factory()&#10;    )&#10;) {&#10;&#10;    val context = LocalContext.current&#10;    viewModel.initModel(context = context)&#10;    viewModel.startGyroListening(context)&#10;&#10;    val camVM: CameraViewModel = viewModel(&#10;        factory = CameraViewModel.Factory()&#10;    )&#10;    val lifecycleOwner = LocalLifecycleOwner.current&#10;    val cameraxSelector = CameraSelector.Builder().requireLensFacing(CameraSelector.LENS_FACING_BACK).build()&#10;&#10;    LaunchedEffect(Unit) {&#10;        val recorder = Recorder.Builder()&#10;            .setQualitySelector(QualitySelector.fromOrderedList(&#10;                listOf(Quality.HD, Quality.FHD) // prefer HD to save power&#10;            ))&#10;            .build()&#10;        val videoCapture = VideoCapture.withOutput(recorder)&#10;&#10;        // Initialize the ViewModel with application context inside VM&#10;        camVM.initialize(context, videoCapture)&#10;        val cameraProvider = context.getCameraProvider()&#10;        cameraProvider.unbindAll()&#10;        cameraProvider.bindToLifecycle(lifecycleOwner, cameraxSelector, videoCapture)&#10;        camVM.startRecordingClips()&#10;    }&#10;&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    val potholeDetected = viewModel.potholeDetected.collectAsState()&#10;    Log.d(&quot;HomePage&quot;, &quot;potholeDetected ${potholeDetected.value}&quot;)&#10;&#10;    val isAtTop = remember {&#10;        derivedStateOf {&#10;            lazyListState.firstVisibleItemIndex == 0 &amp;&amp; lazyListState.firstVisibleItemScrollOffset == 0&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(potholeDetected.value) {&#10;        if (potholeDetected.value) {&#10;            withContext(Dispatchers.Main) {&#10;                try {&#10;                    camVM.triggerEventRecording()&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;Recording&quot;, &quot;Error: ${e.message}&quot;, e)&#10;                }&#10;            }&#10;&#10;            // Toast must run on Main thread&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Pothole detected! Recording started.&quot;,&#10;                Toast.LENGTH_SHORT&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    // Use safeDrawing insets to avoid status bar/notch overlap&#10;    Scaffold(&#10;        topBar = {&#10;            SmallTopAppBar(&#10;                colors = if (!isAtTop.value) TopAppBarDefaults.mediumTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                ) else TopAppBarDefaults.mediumTopAppBarColors(&#10;                    containerColor = Color.Transparent&#10;                ),&#10;                navigationIcon = {&#10;                    Box(Modifier.padding(horizontal = JlResDimens.dp20)) {&#10;                        Image(&#10;                            painterResource(id = R.drawable.pic_sensify_logo),&#10;                            modifier = Modifier&#10;                                .width(JlResDimens.dp32)&#10;                                .height(JlResDimens.dp36),&#10;                            contentDescription = null,&#10;                            contentScale = ContentScale.FillBounds&#10;                        )&#10;                    }&#10;                },&#10;                title = {&#10;                    Text(&#10;                        text = &quot;ILGC&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        textAlign = TextAlign.Center,&#10;                        style = JlResTxtStyles.h4,&#10;                        fontWeight = FontWeight(400),&#10;                        modifier = modifier.fillMaxWidth(),&#10;                    )&#10;                },&#10;                actions = {&#10;                    Box(Modifier.padding(horizontal = JlResDimens.dp20)) {&#10;                        Image(&#10;                            painterResource(id = R.drawable.pic_sensify_logo),&#10;                            modifier = Modifier&#10;                                .alpha(0f)&#10;                                .width(JlResDimens.dp32)&#10;                                .height(JlResDimens.dp36),&#10;                            contentDescription = null,&#10;                            contentScale = ContentScale.FillBounds&#10;                        )&#10;                    }&#10;                },&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                modifier = Modifier&#10;                    .padding(bottom = 16.dp)&#10;            ) {&#10;                Column {&#10;                    ToggleableFAB(viewModel)&#10;                    FloatingActionButton(&#10;                        onClick = { camVM.triggerEventRecording() },&#10;                        shape = RoundedCornerShape(50),&#10;                        containerColor = if (camVM.isRecording) Color.Red else Color.Blue,&#10;                        modifier = Modifier&#10;                            .padding(bottom = 16.dp)&#10;                            .background(&#10;                                brush = Brush.linearGradient(&#10;                                    colors = if (camVM.isRecording)&#10;                                        listOf(&#10;                                            Color.Red.copy(alpha = 0.8f),&#10;                                            Color.Red.copy(alpha = 0.5f)&#10;                                        )&#10;                                    else&#10;                                        listOf(&#10;                                            Color.Blue.copy(alpha = 0.8f),&#10;                                            Color.Blue.copy(alpha = 0.5f)&#10;                                        )&#10;                                ),&#10;                                shape = RoundedCornerShape(50.dp)&#10;                            )&#10;                            .border(&#10;                                brush = Brush.verticalGradient(&#10;                                    colors = if (camVM.isRecording)&#10;                                        listOf(&#10;                                            Color.Black.copy(alpha = 0.1f),&#10;                                            Color.Black.copy(alpha = 0.3f)&#10;                                        )&#10;                                    else&#10;                                        listOf(&#10;                                            Color.White.copy(alpha = 0.1f),&#10;                                            Color.White.copy(alpha = 0.3f)&#10;                                        )&#10;                                ),&#10;                                width = JlResDimens.dp1,&#10;                                shape = RoundedCornerShape(50.dp)&#10;                            )&#10;                    ) {&#10;                        Icon(Icons.Rounded.Videocam, &quot;Record Video&quot;, tint = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        contentWindowInsets = WindowInsets(0)&#10;    ) {&#10;&#10;        LazyColumn(&#10;&#10;            modifier = Modifier&#10;                .consumedWindowInsets(it)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.05f),&#10;                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.02f),&#10;                        )&#10;                    )&#10;                ),&#10;            contentPadding = it,&#10;            state = lazyListState&#10;        ) {&#10;&#10;            item {&#10;                Spacer(modifier = JlResShapes.Space.H24)&#10;&#10;            }&#10;&#10;            // Available Sensors&#10;            item {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .padding(&#10;                            start = JlResDimens.dp40, end = JlResDimens.dp32,&#10;                            top = JlResDimens.dp12, bottom = JlResDimens.dp16&#10;                        ),&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Available Sensors&quot;,&#10;                        fontSize = JlResDimens.sp16,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;&#10;            items(viewModel.mSensorsList.windowed(2, 2, true)) { item -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = JlResDimens.dp32)&#10;                ) {&#10;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        ) {&#10;                        for (i in item.indices) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                            ) {&#10;                                HomeSensorItem(&#10;                                    modelSensor = item[i],&#10;                                    onCheckChange = { type: Int, isChecked: Boolean -&gt;&#10;                                        viewModel.onSensorChecked(type, isChecked)&#10;                                    },&#10;                                    onClick = {&#10;                                        navController?.navigate(&quot;${NavDirectionsApp.SensorDetailPage.route}/${it}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;&#10;                            if (i &lt; item.size - 1) {&#10;                                Spacer(modifier = Modifier.width(JlResDimens.dp8))&#10;                            }&#10;                        }&#10;                        if (item.size % 2 != 0) {&#10;                            Spacer(modifier = Modifier.width(JlResDimens.dp8))&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(JlResDimens.dp8))&#10;&#10;            }&#10;&#10;            item { Spacer(modifier = Modifier.height(JlResDimens.dp16)) }&#10;        }&#10;    }&#10;&#10;    // Responsive pothole banner that respects status bar/notch and screen width&#10;    val screenWidthDp = LocalConfiguration.current.screenWidthDp&#10;    val bannerFontSize = if (screenWidthDp &lt; 360) 12.sp else 14.sp&#10;    AnimatedVisibility(&#10;        visible = potholeDetected.value,&#10;        enter = expandVertically(animationSpec = tween(durationMillis = 900)),&#10;        exit = shrinkVertically(animationSpec = tween(durationMillis = 900)),&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(Color.Red.copy(alpha = 0.7f), shape = RoundedCornerShape(8.dp))&#10;                .padding(8.dp)&#10;        ) {&#10;            Icon(&#10;                Icons.Default.Warning,&#10;                contentDescription = &quot;Warning&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(if (screenWidthDp &lt; 360) 18.dp else 24.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Pothole detected!&quot;,&#10;                color = Color.White,&#10;                style = JlResTxtStyles.p3.copy(fontSize = bannerFontSize)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ToggleableFAB(viewModel: HomeViewModel) {&#10;    var isLogging by remember { mutableStateOf(false) }&#10;&#10;    FloatingActionButton(&#10;        onClick = {&#10;            isLogging = !isLogging  // Toggle state&#10;            viewModel.toggleCsvLogging()&#10;        },&#10;        shape = RoundedCornerShape(50),&#10;        containerColor = if (isLogging) Color(0xFF800080) else Color.Yellow, // Purple when active&#10;        modifier = Modifier&#10;            .padding(bottom = 16.dp)&#10;            .background(&#10;                brush = Brush.linearGradient(&#10;                    colors = listOf(&#10;                        if (isLogging) Color.Magenta.copy(alpha = 0.8f) else Color.Red.copy(alpha = 0.8f),&#10;                        if (isLogging) Color.Magenta.copy(alpha = 0.5f) else Color.Red.copy(alpha = 0.5f)&#10;                    )&#10;                ),&#10;                shape = RoundedCornerShape(50.dp)&#10;            )&#10;            .border(&#10;                brush = Brush.verticalGradient(&#10;                    listOf(Color.Black.copy(alpha = 0.1f), Color.Black.copy(alpha = 0.3f))&#10;                ),&#10;                width = JlResDimens.dp1,&#10;                shape = RoundedCornerShape(50.dp)&#10;            )&#10;    ) {&#10;        Icon(Icons.Rounded.AddChart, &quot;Record CSV&quot;, tint = Color.White)&#10;    }&#10;}&#10;private suspend fun Context.getCameraProvider(): ProcessCameraProvider =&#10;    suspendCoroutine { continuation -&gt;&#10;        ProcessCameraProvider.getInstance(this).also { cameraProvider -&gt;&#10;            cameraProvider.addListener({&#10;                continuation.resume(cameraProvider.get())&#10;            }, ContextCompat.getMainExecutor(this))&#10;        }&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>